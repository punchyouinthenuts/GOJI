#include "mainwindow.h"
#include "logger.h"
#include "configmanager.h"
#include "errormanager.h"
#include <QApplication>
#include <QGuiApplication>
#include <QIcon>
#include <QDateTime>
#include <QDir>
#include <QStandardPaths>
#include <QMessageBox>
#include <QStyleFactory>
#include <QDebug>
#include <QTimer>
#include <QFileInfo>

#ifndef VERSION
#define VERSION "0.9.968"
#endif

// Helper function to write a log message to a direct file
// This helps diagnose issues when regular logging might fail
void writeDirectDiagnostic(const QString& message) {
    QString path = QDir::homePath() + "/goji_diagnosis.log";
    QFile file(path);
    if (file.open(QIODevice::WriteOnly | QIODevice::Append | QIODevice::Text)) {
        QTextStream stream(&file);
        stream << QDateTime::currentDateTime().toString("yyyy-MM-dd hh:mm:ss.zzz")
               << " - " << message << "\n";
        file.close();
    }
}

int main(int argc, char *argv[])
{
    // Direct diagnostic before anything else
    writeDirectDiagnostic("Starting application");

    try {
        // Create QApplication first to ensure Qt framework is initialized
        writeDirectDiagnostic("Creating QApplication");
        QApplication a(argc, argv);
        writeDirectDiagnostic("QApplication created");

        // Set application information early
        QCoreApplication::setApplicationName("Goji");
        QCoreApplication::setOrganizationName("GojiApp");
        QCoreApplication::setApplicationVersion(VERSION);
        writeDirectDiagnostic("Application information set");

        // Basic system information diagnostics
        writeDirectDiagnostic("Qt version: " + QString(QT_VERSION_STR));
        writeDirectDiagnostic("Current directory: " + QDir::currentPath());
        writeDirectDiagnostic("Home directory: " + QDir::homePath());
        writeDirectDiagnostic("Temp directory: " + QDir::tempPath());

        // Check executable location and existence of critical DLLs
        QString exePath = QCoreApplication::applicationFilePath();
        QFileInfo exeInfo(exePath);
        QString exeDir = exeInfo.dir().absolutePath();
        writeDirectDiagnostic("Executable path: " + exePath);
        writeDirectDiagnostic("Executable directory: " + exeDir);

        // Display a message to confirm UI works
        writeDirectDiagnostic("Showing startup message");
        QTimer::singleShot(100, []() {
            QMessageBox::information(nullptr, "GOJI Startup",
                                     "GOJI is starting up. Click OK to continue.");
        });

        // Initialize logging
        writeDirectDiagnostic("Initializing logging...");
        QString logDir = QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) + "/logs";
        if (!QDir().mkpath(logDir)) {
            writeDirectDiagnostic("Failed to create log directory: " + logDir);
            QMessageBox::critical(nullptr, "Startup Error", "Failed to create log directory: " + logDir);
            return 1;
        }
        QString logFilePath = logDir + "/goji_" +
                              QDateTime::currentDateTime().toString("yyyyMMdd_hhmmss") + ".log";
        writeDirectDiagnostic("Log file path: " + logFilePath);

        bool loggerInitialized = false;
        try {
            loggerInitialized = Logger::instance().initialize(logFilePath, true);
            if (loggerInitialized) {
                writeDirectDiagnostic("Logger initialized successfully");
                Logger::instance().info("Logger initialized successfully");
            } else {
                writeDirectDiagnostic("Logger initialization returned false");
            }
        } catch (const std::exception& e) {
            writeDirectDiagnostic("Exception in Logger initialization: " + QString(e.what()));
        } catch (...) {
            writeDirectDiagnostic("Unknown exception in Logger initialization");
        }

        // Initialize ConfigManager
        writeDirectDiagnostic("Initializing ConfigManager...");
        try {
            ConfigManager::instance().initialize("GojiApp", "Goji");
            writeDirectDiagnostic("ConfigManager initialized successfully");
            if (loggerInitialized) {
                Logger::instance().info("ConfigManager initialized");
            }
        } catch (const std::exception& e) {
            writeDirectDiagnostic("Exception in ConfigManager initialization: " + QString(e.what()));
        } catch (...) {
            writeDirectDiagnostic("Unknown exception in ConfigManager initialization");
        }

        // Initialize ErrorManager
        writeDirectDiagnostic("Setting ErrorManager log function...");
        try {
            ErrorManager::instance().setLogFunction([](const QString& msg) {
                Logger::instance().info(msg);
            });
            writeDirectDiagnostic("ErrorManager log function set");
            if (loggerInitialized) {
                Logger::instance().info("ErrorManager log function set");
            }
        } catch (const std::exception& e) {
            writeDirectDiagnostic("Exception in ErrorManager initialization: " + QString(e.what()));
        } catch (...) {
            writeDirectDiagnostic("Unknown exception in ErrorManager initialization");
        }

        // Set high DPI settings
#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
        writeDirectDiagnostic("Setting HighDpiScaleFactorRoundingPolicy...");
        QGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);
        writeDirectDiagnostic("HighDpiScaleFactorRoundingPolicy set");
#endif

        // Set stylesheet
        writeDirectDiagnostic("Setting stylesheet...");
        a.setStyleSheet(R"(
        QPushButton:disabled, QToolButton:disabled {
            background-color: #d3d3d3; /* Light grey background */
            color: #a9a9a9; /* Dark grey text */
            border: 1px solid #a9a9a9; /* Dark grey border */
        }
        QComboBox:disabled {
            background-color: #d3d3d3; /* Light grey background */
            color: #696969; /* Darker grey text */
            border: 1px solid #a9a9a9; /* Dark grey border */
        }
        )");
        writeDirectDiagnostic("Stylesheet set");

        // Create MainWindow
        writeDirectDiagnostic("Creating MainWindow...");
        MainWindow* w = nullptr;
        try {
            w = new MainWindow();
            writeDirectDiagnostic("MainWindow created successfully");
        } catch (const std::exception& e) {
            writeDirectDiagnostic("Exception in MainWindow constructor: " + QString(e.what()));
            QMessageBox::critical(nullptr, "Startup Error",
                                  QString("Failed to create MainWindow: %1").arg(e.what()));
            return 1;
        } catch (...) {
            writeDirectDiagnostic("Unknown exception in MainWindow constructor");
            QMessageBox::critical(nullptr, "Startup Error",
                                  "Unknown error while creating MainWindow");
            return 1;
        }

        // Set window icon and show MainWindow
        writeDirectDiagnostic("Setting window icon...");
        w->setWindowIcon(QIcon(":/resources/icons/ShinGoji.ico"));
        writeDirectDiagnostic("Icon set, showing MainWindow...");
        w->show();
        writeDirectDiagnostic("MainWindow shown");

        // Enter event loop
        writeDirectDiagnostic("Entering event loop...");
        int result = a.exec();
        writeDirectDiagnostic("Application exiting with code: " + QString::number(result));

        // Clean up
        delete w;
        if (loggerInitialized) {
            Logger::instance().close();
        }

        return result;
    }
    catch (const std::exception& e) {
        writeDirectDiagnostic("Top-level exception: " + QString(e.what()));
        QMessageBox::critical(nullptr, "Fatal Error",
                              QString("A fatal error occurred: %1").arg(e.what()));
        return 1;
    }
    catch (...) {
        writeDirectDiagnostic("Top-level unknown exception");
        QMessageBox::critical(nullptr, "Fatal Error",
                              "An unknown fatal error occurred.");
        return 1;
    }
}
